// Legend Store Full Component - LegendStore.jsx

import React, { useState, useEffect } from 'react'; import { Card, CardContent } from '@/components/ui/card'; import { Input } from '@/components/ui/input'; import { Button } from '@/components/ui/button'; import { motion } from 'framer-motion'; import { initializeApp } from 'firebase/app'; import { getAuth, onAuthStateChanged, signInWithEmailAndPassword, createUserWithEmailAndPassword, signOut } from 'firebase/auth'; import { getFirestore, collection, addDoc, getDocs, query, where } from 'firebase/firestore';

const firebaseConfig = { apiKey: "AIzaSyCmJxQPmHqwJX_cfZW5h0aGg2rYuHdPI-c", authDomain: "legend-store-1c1a4.firebaseapp.com", projectId: "legend-store-1c1a4", storageBucket: "legend-store-1c1a4.appspot.com", messagingSenderId: "474992551695", appId: "1:474992551695:web:3dd7b0918ad31ccd97407a", measurementId: "G-TR8Z6XF335" };

const app = initializeApp(firebaseConfig); const auth = getAuth(app); const db = getFirestore(app);

const products = [ { name: '5 Diamonds', price: '₹15', amount: 1500 }, { name: '11 Diamonds', price: '₹19', amount: 1900 }, { name: '22 Diamonds', price: '₹39', amount: 3900 }, { name: '56 Diamonds', price: '₹85', amount: 8500 }, { name: '86 Diamonds', price: '₹109', amount: 10900 }, { name: '113 Diamonds', price: '₹159', amount: 15900 }, { name: '172 Diamonds', price: '₹219', amount: 21900 }, { name: '257 Diamonds', price: '₹329', amount: 32900 }, { name: '279 Diamonds', price: '₹358', amount: 35800 }, { name: '343 Diamonds', price: '₹439', amount: 43900 }, { name: '514 Diamonds', price: '₹659', amount: 65900 }, { name: '706 Diamonds', price: '₹849', amount: 84900 }, { name: '1028 Diamonds', price: '₹1318', amount: 131800 }, { name: '2195 Diamonds', price: '₹2680', amount: 268000 }, { name: '3688 Diamonds', price: '₹4480', amount: 448000 }, { name: '100 Diamonds (50+50)', price: '₹81', amount: 8100 }, { name: '300 Diamonds (150+150)', price: '₹215', amount: 21500 }, { name: '500 Diamonds (250+250)', price: '₹345', amount: 34500 }, { name: '1000 Diamonds (500+500)', price: '₹679', amount: 67900 }, { name: 'Weekly Pass', price: '₹125', amount: 12500 }, { name: 'Twilight Pass', price: '₹709', amount: 70900 } ];

export default function LegendStore() { const [selected, setSelected] = useState(null); const [userId, setUserId] = useState(''); const [serverId, setServerId] = useState(''); const [user, setUser] = useState(null); const [email, setEmail] = useState(''); const [password, setPassword] = useState(''); const [orders, setOrders] = useState([]);

useEffect(() => { onAuthStateChanged(auth, (user) => { setUser(user); if (user) loadOrders(user.uid); }); }, []);

const loadOrders = async (uid) => { const q = query(collection(db, 'orders'), where('uid', '==', uid)); const querySnapshot = await getDocs(q); const data = querySnapshot.docs.map(doc => doc.data()); setOrders(data); };

const payWithRazorpay = async () => { const res = await fetch('/api/create-order', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ amount: selected.amount }) }); const data = await res.json();

const options = {
  key: 'RAZORPAY_KEY_ID', // Replace with real key in production
  amount: selected.amount,
  currency: 'INR',
  name: 'Legend Store',
  description: selected.name,
  order_id: data.id,
  handler: async function (response) {
    await addDoc(collection(db, 'orders'), {
      uid: user.uid,
      product: selected.name,
      userId,
      serverId,
      paymentId: response.razorpay_payment_id,
      orderId: response.razorpay_order_id,
      createdAt: new Date()
    });
    alert('Payment successful and order recorded!');
    setSelected(null);
  },
  prefill: {
    email: user.email
  },
  theme: {
    color: '#3399cc'
  }
};
const rzp = new window.Razorpay(options);
rzp.open();

};

const signUp = () => createUserWithEmailAndPassword(auth, email, password); const logIn = () => signInWithEmailAndPassword(auth, email, password); const logOut = () => signOut(auth);

return ( <div className="min-h-screen p-6 bg-gray-950 text-white"> <h1 className="text-3xl font-bold mb-6 text-center">Legend Store - MLBB Diamonds</h1> {!user ? ( <div className="max-w-sm mx-auto bg-gray-800 p-6 rounded-xl"> <Input placeholder="Email" className="mb-3" value={email} onChange={e => setEmail(e.target.value)} /> <Input type="password" placeholder="Password" className="mb-3" value={password} onChange={e => setPassword(e.target.value)} /> <Button onClick={logIn} className="w-full mb-2">Login</Button> <Button onClick={signUp} className="w-full" variant="outline">Register</Button> </div> ) : ( <> <div className="mb-6 text-center"> <p className="mb-2">Logged in as {user.email}</p> <Button variant="ghost" onClick={logOut}>Logout</Button> </div>

{!selected ? (
        <motion.div layout className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4">
          {products.map((product, idx) => (
            <Card key={idx} onClick={() => setSelected(product)} className="bg-gray-800 cursor-pointer hover:shadow-lg">
              <CardContent className="p-4">
                <h2 className="text-lg font-semibold">{product.name}</h2>
                <p className="text-sm text-gray-400">{product.price}</p>
              </CardContent>
            </Card>
          ))}
        </motion.div>
      ) : (
        <motion.div layout className="max-w-md mx-auto bg-gray-800 p-6 rounded-xl shadow-lg">
          <h2 className="text-xl font-semibold mb-4">Top-up: {selected.name}</h2>
          <Input placeholder="MLBB User ID" className="mb-4" value={userId} onChange={e => setUserId(e.target.value)} />
          <Input placeholder="Server ID" className="mb-4" value={serverId} onChange={e => setServerId(e.target.value)} />
          <Button className="w-full" onClick={payWithRazorpay}>Pay with Razorpay</Button>
          <Button variant="ghost" className="mt-4 text-sm text-gray-300" onClick={() => setSelected(null)}>Go Back</Button>
        </motion.div>
      )}

      <div className="mt-10">
        <h2 className="text-2xl mb-4 font-bold">Your Orders</h2>
        <ul className="space-y-2">
          {orders.map((o, i) => (
            <li key={i} className="bg-gray-800 p-4 rounded">
              <p className="font-semibold">{o.product}</p>
              <p className="text-sm text-gray-400">ID: {o.userId} | Server: {o.serverId}</p>
            </li>
          ))}
        </ul>
      </div>
    </>
  )}

  <footer className="mt-10 text-center text-gray-600 text-sm">
    Payment via UPI (GPay/PhonePe/Paytm), Crypto (Binance/Web3).<br />
    Contact Support: <a href="https://wa.me/+916009890922" className="underline">+916009890922</a>, <a href="https://wa.me/+916009192486" className="underline">+916009192486</a>
  </footer>
</div>

); }

